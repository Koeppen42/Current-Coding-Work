import React, { useEffect, useState } from "react";
import logo from "../../assets/logo.png";
import { Actor, HttpAgent } from "@dfinity/agent";
import { idlFactory } from "../../../declarations/nft";
import { Principal } from "@dfinity/principal";
import { opend } from "../../../declarations/opend";
import Button from "./Button";


function Item(props) {
  const [name, setName] = useState();
  const [owner, setOwner] = useState();
  const [image, setImage] = useState();
  const [button, setButton] = useState();
  const [priceInput, setPriceInput] = useState();
  const [loaderHidden, setLoaderHidden] = useState(true);
  const [blur, setBlur] = useState();
  const [sellStatus, setSellStatus] = useState("");

  const id = props.id;

    const localHost = "http://localhost:8080/";
    const agent = new HttpAgent({host: localHost});
    agent.fetchRootKey();
    let NFTActor;

    async function loadNFT() {
      NFTActor = await Actor.createActor(idleFactory, {
        agent,
        canisterId: id,
      });

    const name = await NFTActor.getName();
    const owner = await NFTActor.getOwner();
    const imageData = await NFTActor.getAsset();
    const imageContent = new Uint8Array(imageData);
    const image = URL.createObjectURL(
      new Blob([imageContent.buffer], {type: "image/png" })
    );

    setName(name);
    setOwner(owner.toText());
    setImage(image);
    
    const nftIsListed = await opend.isListed(props.id);

    if (nftIsListed) {
      setOwner("OpenD")
      setBlur({ filter: "blur(4px)" });
      setSellStatus("Listed");
    } else {
      setButton(<Button handleClick={handleSell} text={"Sell"}/>);
    }
    

    }

    useEffect(() => {
      loadNFT();
    }, []);

    let price;
    function handleSell() {
      console.log("Sell clicked");
      setPriceInput(
      <input
        placeholder="Price in KANG"
        type="number"
        className="price-input"
        value={price}
        onChange={(e) => price=e.target.value}
      />
      );
      setButton(<Button handleClick={sellItem} text={"Confirm"}/>);
    }

    async function sellItem() {
      setBlur({filter: "blur(4px)"});
      setLoaderHidden(false);
      console.log("set price = " + price);
      const listingResult = await opend.ListItem(props.id, Number(price));
      console.log("listing: " + listingResult);
      if (listingResult == "Success") {
        const openDId = await opend.getOpenDCanisterID();
        const transferResult = await NFTActor.transferOwnership(openDId);
        console.log("transfer: " + transferResult);
        if (transferResult == "Success") {
          setLoaderHidden(true);
          setButton();
          setPriceInput();
          setOwner("OpenD");
          setSellStatus("Listed");
        }
      }
    }

  return (
    <div className="disGrid-item">
      <div className="disPaper-root disCard-root makeStyles-root-17 disPaper-elevation1 disPaper-rounded">
        <img
          className="disCardMedia-root makeStyles-image-19 disCardMedia-media disCardMedia-img"
          src={image}
          style={blur}
        />
        <div className="lds-ellipsis" hidden={loaderHidden}>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
        <div className="disCardContent-root">
          <h2 className="disTypography-root makeStyles-bodyText-24 disTypography-h5 disTypography-gutterBottom">
            {name}
            <span className="purple-text"> { sellStatus}</span>
          </h2>
          <p className="disTypography-root makeStyles-bodyText-24 disTypography-body2 disTypography-colorTextSecondary">
            Owner: {owner}
          </p>
          {priceInput}
          {button}
        </div>
      </div>
    </div>
  );
}

export default Item;











import Debug "mo:base/Debug";
import Principal "mo:base/Principal";

actor class NFT (name: Text, owner: Principal, content: [Nat8])  = this {
    
    private let itemName = name;
    private var nftOwner = owner;
    private let imageBytes = content;

    public query func getName() : async Text{
        return itemName;
    };

    public query func getOwner() : async Principal {
        return nftOwner;
    };

    public query func getAsset() : async [Nat8] {
        return imageBytes;
    };

    public query func getCanisterId() : async Principal {
        return Principal.fromActor(this);
    };

    public shared(msg) func transferOwnership(newOwner: Principal) : async Text {
        if (msg.caller == nftOwner) {
            nftOwner := newOwner;
            return "Success";
        } else {
            return "Error: Not initated by NFT Owner."
        }
    }


};









import Cycles "mo:base/ExperimentalCycles";
import Debug "mo:base/Debug";
import NFTActorClass "../nft/nft";
import Principal "mo:base/Principal";
import HashMap "mo:base/HashMap";
import NFTActorClass "../nft/nft";
import List "mo:base/List";




actor OpenD {

    private type Listing = {
        itemOwner: Principal;
        itemPrice: Nat;
    };

    var mapOfNFTs = HashMap.HashMap<Principal, NFTActorClass.NFT>(1, Principal.equal, Principal.hash);
    var mapOfOwners = HashMap.HashMap<Principal, List.List<Principal>>(1, Principal.equal, Principal.hash);
    var mapOfListings = HashMap.HashMap<Principal, Listing>(1, Principal.equal, Principal.hash);

    public shared(msg) func mint(imgData: [Nat8], name: Text) : async Principal {
        let owner : Principal = msg.caller;

        Debug.print(debug_show(Cycles.balance()));
        Cycles.add(100_500_000_000);
        let newNFT = await NFTActorClass.NFT(name, owner, imgData);

        let newNFTPrincipal = await newNFT.getCanisterId();
        
        mapOfNFTs.put(newNFTPrincipal, newNFT);
        addToOwnershipMap(owner, newNFTPrincipal);

        return newNFTPrincipal();

    };

    private func addToOwnershipMap(owner: Principal, nftId: Principal) {
        var ownedNFTs = List.list<Principal> = switch (mapOfOwners.get(owner)) {
            case null List.nil<Principal>();
            case (?result) result;
        };

        ownedNFTs := List.push(nftId, ownedNFTs);
        mapOfOwners.put(owner, ownedNFTs);
    }

    public query func getOwnedNFTs(user: Principal) : async [Principal] {
        var userNFTs : List.List<Principal> = switch (mapOfOwners.get(user)) {
            case null List.nil<Principal>();
            case (?result) result;
        };

        return List.toArray(userNFTs);
    };

    public shared(msg) func listItem(id: Principal, price: Nat) : async Text {
        var item : NFTActorClass.NFT = switch (mapOfNFTs.get(id)) {
            case null return "NFT does not exist.";
            case (?result) result;
        };

        let owner = await item.getOwner();
        if (Principal.equal(owner, msg.caller)) {
            let newListing : Listing = {
                itemOwner = owner;
                itemPrice = price;
            };
            mapOfListings.put(id, newListing);
            return "Success";
        } else {
            return "You don't own the NFT."
        }
    };

    public query func getOpenDCanisterID() : async Principal {
        return Principal.fromActor(OpenD);
    }

    public query func isListed(id: Principal) : async Bool {
        if (mapOfListings.get(id) ==null) {
            return false;
        } else {
            return true;
        }
    }

};
